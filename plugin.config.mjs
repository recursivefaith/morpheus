import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const publish = (process.argv[2] === "publish");
const eject = (process.argv[2] === "eject");
const output = publish ? "publish.js" : "main.js";
const entry = [publish ? "src/publish.ts" : "main.ts"];
const format = publish ? "iife" : "cjs";

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: entry,
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins],
  format,
  target: "es2018",
  logLevel: "info",
  sourcemap: (prod || publish || eject) ? false : true,
  treeShaking: true,
  outfile: output,
});

// Build
if (prod || publish) {
	await context.rebuild();
	process.exit(0);

  // Clone built files
} else if (eject) {
  const currentDirectory = process.cwd();
  const twoDirectoriesUp = path.resolve(currentDirectory, '..', '..', '..');

  const cssFilePath = path.join(currentDirectory, 'publish.css');
  const jsFilePath = path.join(currentDirectory, 'publish.js');

  const cssDestinationPath = path.join(twoDirectoriesUp, 'publish.css');
  const jsDestinationPath = path.join(twoDirectoriesUp, 'publish.js');

  fs.copyFileSync(cssFilePath, cssDestinationPath);
  fs.copyFileSync(jsFilePath, jsDestinationPath);
  
	process.exit(0);

  // Watch files
} else {
  await context.watch();
}